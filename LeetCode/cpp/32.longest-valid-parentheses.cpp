#include <algorithm>
#include <chrono>
#include <iostream>
#include <stack>
#include <string>
#include <vector>
using namespace std;

class Solution {
 public:
  int longestValidParentheses(string s) {
    vector<int> dp(s.size(), 0);
    int maxVal = 0;
    for (int i = 1; i < s.size(); i++) {
      if (s[i] == ')') {
        if (s[i - 1] == '(') {
          dp[i] = 2;
          if (i >= 2) {
            dp[i] = dp[i - 2] + dp[i];
          }
        } else if (dp[i - 1] > 0) {
          if (i - dp[i - 1] - 1 >= 0 && s[i - dp[i - 1] - 1] == '(') {
            dp[i] = dp[i - 1] + 2;
            if (i - dp[i - 1] - 2 > 0) {
              dp[i] = dp[i] + dp[i - dp[i - 1] - 2];
            }
          }
        }
      }
      maxVal = max(maxVal, dp[i]);
    }
    return maxVal;
  }

  int longestValidParentheses1(string s) {
    int cnt = 0;
    vector<int> dp(s.size() + 1, 0);

    for (size_t i = 1; i <= s.size(); i++) {
      if (s[i - 1] == '(') {
        cnt++;
      } else {
        if (cnt > 0) {
          cnt--;
          dp[i] = 2;
          if (s[i - 2] == ')') dp[i] += dp[i - 1];
          dp[i] += dp[i - dp[i]];
        }
      }
    }

    return *max_element(dp.begin(), dp.end());
  }

  // TLE
  int longestValidParenthesesTLE(string s) {
    int maxlen = 0;
    for (int i = 0; i < s.length(); i++) {
      for (int j = 2; j + i <= s.length(); j += 2) {
        if (isValid(s.substr(i, j))) {
          maxlen = max(maxlen, j);
        }
      }
    }
    return maxlen;
  }

 private:
  bool isValid(string s) {
    stack<char> stk;
    for (int i = 0; i < s.size(); i++) {
      if (s[i] == '(') {
        stk.push('(');
      } else if (!stk.empty() && stk.top() == '(') {
        stk.pop();
      } else {
        return false;
      }
    }
    return stk.empty();
  }
};

int main() {
  Solution sol = Solution();
  // cout << sol.longestValidParentheses(")()())") << endl;
  auto start = std::chrono::steady_clock::now();
  cout
      << sol.longestValidParentheses(
             "())()()(())((()(()()(((()))((((())((()(())()())(()((((()))()(()))"
             "(())()(())(()(((((())((((((()())())(()(()((())()))(()))))))()(())"
             ")((((())()()()))()()()(((()(()())(()()(()(()()(((()))))))()()))()"
             ")())((()()))))))((()))(((()((())()(()()))((())))()()())))))))()))"
             "))(()))))()))()))()((())))((()))(()))))))(((()))))))))()(()()()(("
             "))((())()))()()(())))()()))(()())()))(((()())()))((())((((()))(()"
             "(()(()()()(((())()(((((()))((()(((((())(()()))((((((((()(()(()(()"
             "(())))(())(()())())(()((((()(())((()(())))(())))()(((((()(()()(()"
             ")))))))())(())(())(()()(((())))((()))(((((()))))())))()((()))()))"
             "))())))))((())(((((()()))((((())))(((()(()(())())(((()(()(()()()("
             "))))())()))((()((())())()()()(((())(((((()((((((()((()())))((((()"
             ")((()(((((((()(()((()()()(()(()())(()(()()((((())))()(((()())))(("
             ")()))()(()()()()(((((())(()))))((()))())))()((((((()))())))()(())"
             ")(())))((((()())(((((()()())(((((())(()())(()))))()(()()))())))))"
             ")())))(((())(()(()()))(()))()(((())))())((((()(((()))))))()(()(()"
             "))()()(()()))))))))((()))))))(())((()((()))()))((((((()())))))(()"
             "((())((((()))))(()(()()()()(()))()()(()(()))(()()(((((((()())(())"
             "(()())((())())()(()())((())()())())(()())))())))(())())())(())((("
             ")())(((()()))()))()()))()(()(())((((((((())))()((())((()((((((((("
             "(()))))(()(((((())(()(()())())))((())())))))()))(()((()()))((()(("
             "())()()()((()(())())((())())(()()(((())))))())()()(()))()())(()(("
             ")((())))((((()()(())))())(())(()(()(())())())(()()())()(())())))("
             "()()(((())))((()()(((())()()(()())((((()()(()())(()((((()(()()(()"
             "(()(((()((()())(()()))(()((((()(((((()))))()()))(((()((((((()(()("
             ")()()())()))(()(())))))((()(((()())())))(((()()))(()(()(((((((()("
             ")))(()(())))())()(())())(())(()))(())(()))()()(()()())))))()))()("
             "(())(((()((((((((())()()))())))((()())(")
      << endl;
  auto stop = std::chrono::steady_clock::now();
  std::chrono::duration<double, std::micro> elapsed = stop - start;
  std::cout << "time: " << elapsed.count() << "us" << std::endl;

  start = std::chrono::steady_clock::now();
  cout
      << sol.longestValidParenthesesTLE(
             "())()()(())((()(()()(((()))((((())((()(())()())(()((((()))()(()))"
             "(())()(())(()(((((())((((((()())())(()(()((())()))(()))))))()(())"
             ")((((())()()()))()()()(((()(()())(()()(()(()()(((()))))))()()))()"
             ")())((()()))))))((()))(((()((())()(()()))((())))()()())))))))()))"
             "))(()))))()))()))()((())))((()))(()))))))(((()))))))))()(()()()(("
             "))((())()))()()(())))()()))(()())()))(((()())()))((())((((()))(()"
             "(()(()()()(((())()(((((()))((()(((((())(()()))((((((((()(()(()(()"
             "(())))(())(()())())(()((((()(())((()(())))(())))()(((((()(()()(()"
             ")))))))())(())(())(()()(((())))((()))(((((()))))())))()((()))()))"
             "))())))))((())(((((()()))((((())))(((()(()(())())(((()(()(()()()("
             "))))())()))((()((())())()()()(((())(((((()((((((()((()())))((((()"
             ")((()(((((((()(()((()()()(()(()())(()(()()((((())))()(((()())))(("
             ")()))()(()()()()(((((())(()))))((()))())))()((((((()))())))()(())"
             ")(())))((((()())(((((()()())(((((())(()())(()))))()(()()))())))))"
             ")())))(((())(()(()()))(()))()(((())))())((((()(((()))))))()(()(()"
             "))()()(()()))))))))((()))))))(())((()((()))()))((((((()())))))(()"
             "((())((((()))))(()(()()()()(()))()()(()(()))(()()(((((((()())(())"
             "(()())((())())()(()())((())()())())(()())))())))(())())())(())((("
             ")())(((()()))()))()()))()(()(())((((((((())))()((())((()((((((((("
             "(()))))(()(((((())(()(()())())))((())())))))()))(()((()()))((()(("
             "())()()()((()(())())((())())(()()(((())))))())()()(()))()())(()(("
             ")((())))((((()()(())))())(())(()(()(())())())(()()())()(())())))("
             "()()(((())))((()()(((())()()(()())((((()()(()())(()((((()(()()(()"
             "(()(((()((()())(()()))(()((((()(((((()))))()()))(((()((((((()(()("
             ")()()())()))(()(())))))((()(((()())())))(((()()))(()(()(((((((()("
             ")))(()(())))())()(())())(())(()))(())(()))()()(()()())))))()))()("
             "(())(((()((((((((())()()))())))((()())(")
      << endl;
  stop = std::chrono::steady_clock::now();
  elapsed = stop - start;
  std::cout << "time: " << elapsed.count() << "us" << std::endl;
  return 0;
}